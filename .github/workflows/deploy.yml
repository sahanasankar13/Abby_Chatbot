name: Deploy to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  STACK_NAME: abby-chatbot
  ENVIRONMENT: dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m pytest tests/

      - name: Create deployment package
        run: |
          mkdir -p deployment_package
          cp -r app.py chatbot templates static requirements.txt deployment_package/
          cp -r data serialized_models deployment_package/
          cp -r deployment/scripts deployment_package/scripts
          cp deployment/appspec.yml deployment_package/
          cd deployment_package && zip -r ../deployment.zip .

      - name: Upload to S3
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs[?OutputKey==`DeploymentBucketName`].OutputValue' --output text)
          aws s3 cp deployment.zip s3://$BUCKET_NAME/deployment.zip

      - name: Create CodeDeploy Deployment
        run: |
          APPLICATION_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs[?OutputKey==`CodeDeployApplication`].OutputValue' --output text)
          DEPLOYMENT_GROUP=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs[?OutputKey==`CodeDeployDeploymentGroup`].OutputValue' --output text)
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs[?OutputKey==`DeploymentBucketName`].OutputValue' --output text)
          
          aws deploy create-deployment \
            --application-name $APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP \
            --s3-location bucket=$BUCKET_NAME,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE 